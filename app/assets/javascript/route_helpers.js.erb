var RouteHelpers = (function() {
  var exports = {},
      slice = Array.prototype.slice;

  <%= JsRouteHelpers.routes.reduce("") do |memo, (name, route)|
    spec = route.path.spec.to_s
    names = route.path.names - ["format"]
    arguments = names + ["params"]

    memo << <<-JS

      exports.#{name.to_s.camelize(:lower)}Path = function(#{arguments.join(", ")}) {
        return helper("#{spec}", slice.call(arguments));
      };
    JS
    memo
  end %>

  // src: https://github.com/knowledgecode/jquery-param
  function param(a) {
    var add = function(s, k, v) {
      v = typeof v === "function" ? v() : v === null ? "" : v === undefined ? "" : v;
      s[s.length] = encodeURIComponent(k) + "=" + encodeURIComponent(v);
    }, buildParams = function (prefix, obj, s) {
      var i, len, key;

      if (Object.prototype.toString.call(obj) === "[object Array]") {
        for (i = 0, len = obj.length; i < len; i++) {
          buildParams(prefix + "[" + (typeof obj[i] === "object" ? i : "") + "]", obj[i], s);
        }
      } else if (obj && obj.toString() === "[object Object]") {
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (prefix) {
              buildParams(prefix + "[" + key + "]", obj[key], s, add);
            } else {
              buildParams(key, obj[key], s, add);
            }
          }
        }
      } else if (prefix) {
        add(s, prefix, obj);
      } else {
        for (key in obj) {
          add(s, key, obj[key]);
        }
      }
      return s;
    };
    return buildParams("", a, []).join("&").replace(/%20/g, "+");
  };

  function filterProps(o, fn) {
    return Object.keys(o).reduce(function(memo, k) {
      if (fn(k)) { memo[k] = o[k]; }
      return memo;
    }, {});
  }

  function fillSpecWithParams(spec, args, params) {
    return spec.replace(/\((.+(:(\w+)))\)/, function(_, p1, p2, p3) {
      // replace optional tokens (:foo) in spec with values from params
      if (params[p3]) {
        // if token matches a key in params, replace the token with the
        // prop value and remove the prop from params
        var replacement = params[p3];
        delete params[p3];
        return p1.replace(p2, replacement);
      } else {
        return "";
      }
    }).replace(/:\w+/g, function(_) {
      // replace required tokens :foo in spec with values from args
      var replacement;
      if (match === ":format") {
        replacement = params["format"];
        delete params["format"];
      } else {
        replacement = args.shift();
      }
      if (["string", "number"].indexOf(typeof replacement) === -1) { throw new Error("InvalidArguments"); }
      return replacement;
    });
  }

  function helper(spec, args) {
    var argsLength = args.length,
        params = typeof args[args.length - 1] === "object" ? args.pop() : {},
        path = fillSpecWithParams(spec, args, params),
        queryString = param(filterProps(params, function(k) { return params[k] !== null && params[k] !== undefined; }));

    return (queryString.length) ? path.concat("?", queryString) : path;
  }

  return exports;
})();
